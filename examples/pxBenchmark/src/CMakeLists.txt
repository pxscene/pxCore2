cmake_minimum_required(VERSION 2.8)
project(pxbenchmark)
find_package(PkgConfig)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_definitions(-DANIMATION_ROTATE_XYZ )

set(PXCOREDIR ${CMAKE_CURRENT_SOURCE_DIR}/../../..)
set(EXTDIR "${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/external")
include(${PXCOREDIR}/cmake/CommOpts.cmake)
include(${PXCOREDIR}/cmake/CommDeps.cmake)
include(${PXCOREDIR}/cmake/NodeDeps.cmake)
include(${PXCOREDIR}/cmake/DukeDeps.cmake)
include(${PXCOREDIR}/cmake/SManDeps.cmake)

set(WESTEROSINC ${EXTDIR}/westeros/external/install/include)
set(WESTEROSSTUBINC ${EXTDIR}/westeros-stub)

set(BREAKPADINC ${EXTDIR}/breakpad/src)

set(WINSPARKLEINC ${EXTDIR}/WinSparkle/include)

set(PX_LIBRARY_SUPPORT 1)
set(PXWAYLAND_LIBRARY_SUPPORT 0)
set(PX_LIBRARY_LINK_PXCORE 1)

option(BUILD_WITH_GL "BUILD_WITH_GL" ON)
option(BUILD_WITH_CXX_11 "BUILD_WITH_CXX_11" ON)
option(BUILD_WITH_WINDOWLESS_EGL "BUILD_WITH_WINDOWLESS_EGL" OFF)
option(BUILD_PXSCENE_ESSOS "BUILD_PXSCENE_ESSOS" OFF)
option(BUILD_WITH_WINDOWLESS_DFB "BUILD_WITH_WINDOWLESS_DFB" OFF)
option(BUILD_PXBENCHMARK_APP "BUILD_PXBENCHMARK_APP" ON)
option(BUILD_PXBENCHMARK_SHARED_LIB "BUILD_PXBENCHMARK_SHARED_LIB" OFF)
option(BUILD_PXBENCHMARK_STATIC_LIB "BUILD_PXBENCHMARK_STATIC_LIB" OFF)
option(BUILD_DEBUG_METRICS "BUILD_DEBUG_METRICS" OFF)
option(PXSCENE_ACCESS_CONTROL_CHECK "PXSCENE_ACCESS_CONTROL_CHECK" ON)
option(PXBENCHMARK_PERMISSIONS_CHECK "PXBENCHMARK_PERMISSIONS_CHECK" ON)

if(WIN32)
option(PXSCENE_COMPILE_WARNINGS_AS_ERRORS "PXSCENE_COMPILE_WARNINGS_AS_ERRORS" OFF)
elseif (APPLE)
option(PXSCENE_COMPILE_WARNINGS_AS_ERRORS "PXSCENE_COMPILE_WARNINGS_AS_ERRORS" ON)
else()
option(PXSCENE_COMPILE_WARNINGS_AS_ERRORS "PXSCENE_COMPILE_WARNINGS_AS_ERRORS" ON)
endif(WIN32)

option(PXSCENE_FONT_ATLAS "PXSCENE_FONT_ATLAS" ON)

if (PXSCENE_FONT_ATLAS)
message("Building with Font Atlas Support")
add_definitions(-DPXSCENE_FONT_ATLAS)
endif (PXSCENE_FONT_ATLAS)

set(PXSCENE_DEFINITIONS )
set(PXSCENE_ADDITIONAL_RESOURCES )
set(PXSCENE_INSTALLER 0)

if (BUILD_WITH_GIF)
message("Building with GIF support")
set(GIF ${EXTDIR}/giflib-5.1.9/)

if(NOT PREFER_SYSTEM_LIBRARIES)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${GIF})
endif(NOT PREFER_SYSTEM_LIBRARIES)
	
if(WIN32)
	set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} libgif.7.lib)
else()
	set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} gif)
endif(WIN32)
add_definitions(-DSUPPORT_GIF)
endif (BUILD_WITH_GIF)

if (APPLE)
message("building pxbenchmark for mac")
set(PX_PLATFORM PX_PLATFORM_MAC)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DRT_PLATFORM_LINUX)
set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/mac)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION})
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DENABLE_NODE_V_6_9 -D_DARWIN_USE_64_BIT_INODE=1 -DNODE_ARCH="x64" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS= -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1 -DHAVE_OPENSSL=1 -DHAVE_DTRACE=1 -D__POSIX__ -DNODE_PLATFORM=darwin -DDUCONFIG_NO_TRANSLITERATION=1 -DUCONFIG_NO_SERVICE=1 -DUCONFIG_NO_REGULAR_EXPRESSIONS=1 -DU_ENABLE_DYLOAD=0 -DU_STATIC_IMPLEMENTATION=1 -DU_HAVE_STD_STRING=0 -DUCONFIG_NO_BREAK_ITERATION=0 -DUCONFIG_NO_LEGACY_CONVERSION=1 -DUCONFIG_NO_CONVERSION=1 -DHTTP_PARSER_STRICT=0 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64)
set(PLATFORM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/mac/pxSharedContextNative.mm)
set(PXSCENE_LINKER_OPTIONS "-framework OpenGL -framework Cocoa -framework Foundation")
if (ENABLE_THREAD_SANITIZER)
set(PXSCENE_LINKER_OPTIONS "${PXSCENE_LINKER_OPTIONS} -fsanitize=thread")
endif (ENABLE_THREAD_SANITIZER)
if (ENABLE_ADDRESS_SANITIZER)
set(PXSCENE_LINKER_OPTIONS "${PXSCENE_LINKER_OPTIONS} -fsanitize=address")
endif (ENABLE_ADDRESS_SANITIZER)
set(PXSCENE_LINK_LIBRARIES)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${NODE_LIBRARY_DIRS} ${DUKE_LIBRARY_DIRS} ${COMM_DEPS_LIBRARY_DIRS})
set(PLATFORM_LIBRARIES  ${PLATFORM_LIBRARIES} pxCore rtCore_s pthread ${NODE_LIBRARIES} ${DUKE_LIBRARIES} ${COMM_DEPS_LIBRARIES})
include_directories(AFTER ${NODE_INCLUDE_DIRS} ${DUKE_INCLUDE_DIRS} ${COMM_DEPS_INCLUDE_DIRS})
if (DEFINED ENV{CODE_COVERAGE})
message("enabling code coverage support")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DENABLE_CODE_COVERAGE)
execute_process(COMMAND clang --version OUTPUT_VARIABLE LLVM_VERSION1 ERROR_VARIABLE ERROR_VARIABLE1 COMMAND grep "LLVM version" OUTPUT_VARIABLE LLVM_VERSION2 ERROR_VARIABLE LLVM_ERROR2 COMMAND awk "{print $4}" OUTPUT_FILE llvmoutput OUTPUT_VARIABLE LLVM_VERSION3 ERROR_VARIABLE LLVM_ERROR3)
execute_process(COMMAND awk "{ printf \"%s\", $0 }" llvmoutput OUTPUT_VARIABLE LLVM_VERSION)
execute_process(COMMAND rm llvmoutput)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/${LLVM_VERSION}/lib/darwin)
set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} clang_rt.profile_osx)
endif ()
#set(PX_LIBRARY_SUPPORT 0)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
execute_process(COMMAND "hostname" OUTPUT_VARIABLE HOSTNAME)
string(STRIP ${HOSTNAME} HOSTNAME)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DRT_PLATFORM_LINUX)
add_definitions(${COMM_DEPS_DEFINITIONS})

include_directories(AFTER
${NODE_INCLUDE_DIRS}
${DUKE_INCLUDE_DIRS}
${COMM_DEPS_INCLUDE_DIRS}
)

set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES}
${NODE_LIBRARY_DIRS}
${DUKE_LIBRARY_DIRS}
${COMM_DEPS_LIBRARY_DIRS}
)
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES}
${NODE_LIBRARIES}
${DUKE_LIBRARIES}
${COMM_DEPS_LIBRARIES}
pthread rt dl m)

set(PXSCENE_APP_LIBRARIES ${PXSCENE_APP_LIBRARIES} pxCore rtCore_s)

if (HOSTNAME STREQUAL "raspberrypi")
message("building pxbenchmark for raspberrypi")
set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION})
set(PLATFORM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/egl/pxContextUtils.cpp)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DPXSCENE_DISABLE_PXCONTEXT_EXT)
include_directories(AFTER /opt/vc/include /opt/vc/include/interface/vcos/pthreads
/opt/vc/include/interface/vmcs_host/linux /opt/vc/include)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /opt/vc/lib/)
# /usr/lib/ /opt/minecraft-pi/lib/bcrm/)
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} bcm_host brcmEGL brcmGLESv2)
#/opt/minecraft-pi/lib/brcm/libEGL.so /opt/minecraft-pi/lib/brcm/libGLESv2.so)
elseif (BUILD_WITH_WINDOWLESS_EGL OR BUILD_PXSCENE_ESSOS)
if (BUILD_WITH_WINDOWLESS_EGL)
message("Building pxbenchmark for windowless EGL")
set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
set(PXSCENE_ADDITIONAL_RESOURCES ${PXSCENE_ADDITIONAL_RESOURCES} ${PXCOREDIR}/src/gles/pxWindowNative.cpp
${PXCOREDIR}/src/gles/LinuxInputEventDispatcher.cpp)
elseif (BUILD_PXSCENE_ESSOS)
message("Building pxbenchmark with essos windows")
set(PX_PLATFORM PX_PLATFORM_WAYLAND_EGL)
set(PXSCENE_APP_LIBRARIES ${PXSCENE_APP_LIBRARIES} essos)
endif(BUILD_WITH_WINDOWLESS_EGL)

set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION} ${PXCOREDIR}/remote ${CMAKE_CURRENT_SOURCE_DIR})
set(PLATFORM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/egl/pxContextUtils.cpp)

set(PXSCENE_ADDITIONAL_APP_INCLUDES_LIST $ENV{PXSCENE_ADDITIONAL_APP_INCLUDES})
separate_arguments(PXSCENE_ADDITIONAL_APP_INCLUDES_LIST)
include_directories(AFTER ${PXSCENE_ADDITIONAL_APP_INCLUDES_LIST})
set(PXSCENE_ADDITIONAL_APP_LIBRARIES_LIST $ENV{PXSCENE_ADDITIONAL_APP_LIBRARIES})
separate_arguments(PXSCENE_ADDITIONAL_APP_LIBRARIES_LIST)
set(PXSCENE_APP_LIBRARIES ${PXSCENE_APP_LIBRARIES} ${PXSCENE_ADDITIONAL_APP_LIBRARIES_LIST})


set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DPX_NO_WINDOW -DENABLE_V8_HEAP_PARAMS -DENABLE_MAX_TEXTURE_SIZE -DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE)
set(PXSCENE_PLATFORM_DEFINE_LIST)
if (DEFINED ENV{PXSCENE_PLATFORM_DEFINES})
set(PXSCENE_PLATFORM_DEFINE_LIST $ENV{PXSCENE_PLATFORM_DEFINES})
separate_arguments(PXSCENE_PLATFORM_DEFINE_LIST)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ${PXSCENE_PLATFORM_DEFINE_LIST})
message("Extra platform defines: " ${PXSCENE_PLATFORM_DEFINE_LIST})
endif (DEFINED ENV{PXSCENE_PLATFORM_DEFINES})

set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DPXSCENE_ENABLE_ALL_APPS_WAYLAND_CONFIG)
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES})
elseif (BUILD_WITH_WINDOWLESS_DFB)
message("building pxscene for windowless DFB")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GNU_SOURCE=1 -D__STDC_LIMIT_MACROS -O3")
set(PX_PLATFORM PX_PLATFORM_GENERIC_DFB)
set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/dfb)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION})
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} directfb direct fusion)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DPX_NO_WINDOW -DENABLE_DFB -DENABLE_DFB_GENERIC -DPX_PLATFORM_GENERIC_DFB -DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE)
set(PXCORE_INCLUDES $ENV{PXCORE_INCLUDES})
separate_arguments(PXCORE_INCLUDES)
include_directories(BEFORE ${PXCORE_INCLUDES})
else ()
message("building pxbenchmark for glut")
set(PX_PLATFORM PX_PLATFORM_GLUT)
set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/glut)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION})
set(PLATFORM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/glut/pxContextUtils.cpp)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DHAS_LINUX_BREAKPAD)
include_directories(AFTER ${GLUTINC})
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} glut breakpad_client)
set(PX_LIBRARY_LINK_PXCORE 0)
endif (HOSTNAME STREQUAL "raspberrypi")
if (NOT USE_NODE_0_12_7)
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1)
endif (NOT USE_NODE_0_12_7)
set(PXSCENE_LINKER_OPTIONS "")
#set(PXSCENE_LINK_LIBRARIES pthread)
if (DEFINED ENV{CODE_COVERAGE})
message("enabling code coverage support")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DENABLE_CODE_COVERAGE)
set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} gcov)
endif ()
elseif (WIN32)
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)
add_definitions(-DWIN32 -D_LIB -DPX_PLATFORM_WIN -DRT_PLATFORM_WINDOWS)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /Zi /DEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /EHs-c-")
set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/win/Release)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${PXCORE_LIB_LOCATION})
set(PLATFORM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/glut/pxContextUtils.cpp)
if (SUPPORT_NODE)
set(PLATFORM_SOURCES ${PLATFORM_SOURCES}
${NODEDIR}/src/async-wrap.cc ${NODEDIR}/src/backtrace_win32.cc
${NODEDIR}/src/cares_wrap.cc ${NODEDIR}/src/connection_wrap.cc ${NODEDIR}/src/connect_wrap.cc
${NODEDIR}/src/debug-agent.cc ${NODEDIR}/src/env.cc ${NODEDIR}/src/fs_event_wrap.cc ${NODEDIR}/src/handle_wrap.cc
${NODEDIR}/src/inspector_agent.cc ${NODEDIR}/src/inspector_socket.cc ${NODEDIR}/src/js_stream.cc ${NODEDIR}/src/node.cc
${NODEDIR}/src/node_buffer.cc ${NODEDIR}/src/node_config.cc ${NODEDIR}/src/node_constants.cc
${NODEDIR}/src/node_contextify.cc ${NODEDIR}/src/node_counters.cc ${NODEDIR}/src/node_crypto.cc
${NODEDIR}/src/node_crypto_bio.cc ${NODEDIR}/src/node_crypto_clienthello.cc ${NODEDIR}/src/node_dtrace.cc
${NODEDIR}/src/node_file.cc ${NODEDIR}/src/node_http_parser.cc ${NODEDIR}/src/node_i18n.cc
${NODEDIR}/src/node_javascript.cc ${NODEDIR}/src/node_os.cc ${NODEDIR}/src/node_revert.cc
${NODEDIR}/src/node_stat_watcher.cc ${NODEDIR}/src/node_util.cc ${NODEDIR}/src/node_v8.cc ${NODEDIR}/src/node_watchdog.cc
${NODEDIR}/src/node_win32_etw_provider.cc ${NODEDIR}/src/node_win32_perfctr_provider.cc ${NODEDIR}/src/node_zlib.cc
${NODEDIR}/src/pipe_wrap.cc ${NODEDIR}/src/process_wrap.cc ${NODEDIR}/src/signal_wrap.cc ${NODEDIR}/src/spawn_sync.cc
${NODEDIR}/src/stream_base.cc ${NODEDIR}/src/stream_wrap.cc ${NODEDIR}/src/string_bytes.cc ${NODEDIR}/src/string_search.cc
${NODEDIR}/src/tcp_wrap.cc ${NODEDIR}/src/timer_wrap.cc ${NODEDIR}/src/tls_wrap.cc ${NODEDIR}/src/tty_wrap.cc
${NODEDIR}/src/udp_wrap.cc ${NODEDIR}/src/util.cc ${NODEDIR}/src/uv.cc)
endif (SUPPORT_NODE)
set(PLATFORM_SOURCES ${PLATFORM_SOURCES} ${PXCOREDIR}/src/utf8.c)
set_source_files_properties(utf8.c PROPERTIES LANGUAGE CXX)
#set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DHAS_WINDOWS_BREAKPAD)
add_definitions(-DPX_PLATFORM_WIN -DRT_PLATFORM_WINDOWS -DWIN32 -DWIN32_LEAN_AND_MEAN -DGLEW_STATIC -D_TIMESPEC_DEFINED -D_CONSOLE
-DCURL_STATICLIB -DRUNINMAIN -DENABLE_RT_NODE -DDISABLE_WAYLAND -DNODE_WANT_INTERNALS=1
-DENABLE_NODE_V_6_9 -DENABLE_V8_HEAP_PARAMS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DHAVE_INSPECTOR=1
-DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1 -DENABLE_MAX_TEXTURE_SIZE
-DHAVE_OPENSSL -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_HAS_EXCEPTIONS=0 -DBUILDING_V8_SHARED=1
-DBUILDING_UV_SHARED=1 -DNODE_ARCH="ia32" -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1
-DHAVE_OPENSSL=1 -DHAVE_ETW=1 -DHAVE_PERFCTR=1 -DFD_SETSIZE=1024 -DNODE_PLATFORM="win32" -D_UNICODE=1 -DUCONFIG_NO_TRANSLITERATION=1
-DUCONFIG_NO_SERVICE=1 -DUCONFIG_NO_REGULAR_EXPRESSIONS=1 -DU_ENABLE_DYLOAD=0 -DU_STATIC_IMPLEMENTATION=1
-DU_HAVE_STD_STRING=0 -DUCONFIG_NO_BREAK_ITERATION=0 -DUCONFIG_NO_LEGACY_CONVERSION=1 -DUCONFIG_NO_CONVERSION=1
-DHTTP_PARSER_STRICT=0 -DUSE_RENDER_STATS -D_HAS_EXCEPTIONS=0)
add_definitions(${COMM_DEPS_DEFINITIONS})
include_directories(AFTER ${COMM_DEPS_INCLUDE_DIRS} ${NODE_INCLUDE_DIRS} ${DUKE_INCLUDE_DIRS})
include_directories(AFTER "${EXTDIR}/pthread-2.9" ${WINSPARKLEINC} ${EXTDIR}/breakpad-chrome_55/src/)

set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${COMM_DEPS_LIBRARY_DIRS} ${NODE_LIBRARY_DIRS} ${DUKE_LIBRARY_DIRS})

set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pxCore.lib)
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} ${COMM_DEPS_LIBRARIES} ${NODE_LIBRARIES} ${DUKE_LIBRARIES})
set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES}
pthreadVC2.lib opengl32.lib Winmm.lib
Ws2_32.lib Wldap32.lib msvcrt.lib psapi.lib
iphlpapi.lib userenv.lib rtCore_s.lib common.lib
crash_generation_client.lib exception_handler.lib)

set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/breakpad-chrome_55/src/client/windows/Release/lib)

set(PXSCENE_ADDITIONAL_RESOURCES ${CMAKE_CURRENT_SOURCE_DIR}/win/pxscene.rc)
set(PX_LIBRARY_LINK_PXCORE 0)
set(PX_LIBRARY_SUPPORT 0)
set(PXSCENE_LINKER_OPTIONS " /DEBUG ")
set(PXSCENE_INSTALLER 1)
else ()
message(FATAL_ERROR "Cannot build pxscene. Unknown platform")
endif (APPLE)

if (DEFINED ENV{PX_BUILD_VERSION})
set(PXSCENE_VERSION $ENV{PX_BUILD_VERSION})
endif(DEFINED ENV{PX_BUILD_VERSION})

if ("${PXSCENE_VERSION}" STREQUAL "")
add_definitions(-DPX_SCENE_VERSION=dev)
set(PXSCENE_VERSION dev)
else ()
message("pxscene version is: ${PXSCENE_VERSION}")
add_definitions(-DPX_SCENE_VERSION=${PXSCENE_VERSION})
endif("${PXSCENE_VERSION}" STREQUAL "")

set(TARGETINCLUDE "")
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/breakpad/src/client/linux)

set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} ${PLATFORM_LIBRARIES})

set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -D${PX_PLATFORM} -DENABLE_RT_NODE -DRUNINMAIN -DENABLE_HTTP_CACHE)

#todo add code coverage check
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
#set(PXSCENE_LINKER_OPTIONS "${PXSCENE_LINKER_OPTIONS} -lgcov")

include_directories(AFTER ${NODE_INCLUDE_DIRS} ${DUKE_INCLUDE_DIRS})
include_directories(AFTER ${WESTEROSINC} ${WESTEROSSTUBINC} ${TURBO_JPEG_INCLUDE_DIRS} ${BREAKPADINC} ${EXTDIR} ${PXCOREDIR}/src)
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR})
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/rasterizer)
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/include/)
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/)
message(** ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/include/} **)

set(PXSCENE_COMMON_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxResource.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxConstants.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxRectangle.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxFont.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxText.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxTextBox.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxTextCanvas.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxImage.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxImage9.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxImageA.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxImage9Border.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxArchive.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxAnimate.cpp)

set(CELERO_DEFINITIONS "${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/include")

set(CELERO_DEFINITIONS ${CELERO_DEFINITIONS})

set(CELERO_COMMON_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Archive.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Benchmark.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Callbacks.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Console.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Distribution.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Exceptions.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Executor.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Experiment.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/ExperimentResult.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/JUnit.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Memory.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Print.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/ResultTable.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Statistics.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/TestFixture.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/TestVector.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/ThreadTestFixture.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Timer.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Utilities.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../external/Celero/src/Celero.cpp)


set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxScene2d.cpp)

set(PXWAYLAND_LIB_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxContextGL.cpp ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/egl/pxContextUtils.cpp)

if (BUILD_WITH_GL)
message("Building with GL support")
set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES}
    ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxObject.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxShaderUtils.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxShaderResource.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxContextGL.cpp)
else ()
message("Building with DirectFB support")
set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ${CMAKE_CURRENT_SOURCE_DIR}/../../pxScene2d/src/pxContextDFB.cpp)
endif (BUILD_WITH_GL)

if (BUILD_DEBUG_METRICS)
message("Building with debug metrics")
add_definitions(-DENABLE_DEBUG_METRICS)
endif (BUILD_DEBUG_METRICS)


set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ${PLATFORM_SOURCES})

set(PXSCENE_APP_FILES ${PXSCENE_COMMON_FILES} ${CELERO_COMMON_FILES} pxBenchmark.cpp)
set(PXSCENE_LIB_FILES ${PXSCENE_COMMON_FILES})

if (PXSCENE_COMPILE_WARNINGS_AS_ERRORS)
if (!APPLE)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
else ()
message("Cleanup OSX build!!")
endif ()
endif (PXSCENE_COMPILE_WARNINGS_AS_ERRORS)

if (BUILD_WITH_CXX_11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else ()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
endif (BUILD_WITH_CXX_11)

execute_process(
COMMAND git rev-parse HEAD
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
OUTPUT_VARIABLE SPARK_GIT_REVISION
OUTPUT_STRIP_TRAILING_WHITESPACE
)
message("Building Spark with git revision ${SPARK_GIT_REVISION}")

set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} -DSPARK_BUILD_GIT_REVISION="${SPARK_GIT_REVISION}")

set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${PXSCENE_LINKER_OPTIONS})
link_directories(${PXSCENE_LINK_DIRECTORIES})

if (BUILD_PXBENCHMARK_APP)
add_definitions(-DDISABLE_WAYLAND)
message("Enabling build support for pxbenchmark app")
add_executable(pxbenchmark_app ${PXSCENE_APP_FILES} ${PXSCENE_ADDITIONAL_RESOURCES} ${CELERO_COMMON_FILES})
set_target_properties(pxbenchmark_app PROPERTIES OUTPUT_NAME "pxbenchmark")
target_link_libraries(pxbenchmark_app ${PXSCENE_APP_LIBRARIES} ${PXSCENE_LINK_LIBRARIES})
add_definitions(${CELERO_DEFINITIONS})
add_definitions(${PXSCENE_DEFINITIONS})
if (APPLE)
add_custom_command(TARGET pxbenchmark_app COMMENT "making app bundle" POST_BUILD COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/mkapp.sh WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
endif (APPLE)

if (PX_LIBRARY_SUPPORT GREATER 0)
if (BUILD_PXBENCHMARK_SHARED_LIB OR BUILD_PXBENCHMARK_SHARED_LIB)
add_dependencies(pxbenchmark_app pxbenchmark)
endif (BUILD_PXBENCHMARK_SHARED_LIB OR BUILD_PXBENCHMARK_SHARED_LIB)
endif (PX_LIBRARY_SUPPORT GREATER 0)

if (PXSCENE_INSTALLER GREATER 0)
if (WIN32)
message("enabling installer support")
install(TARGETS pxscene_app RUNTIME DESTINATION . COMPONENT pxscene)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/browser DESTINATION . COMPONENT pxscene)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/node_modules DESTINATION . COMPONENT pxscene)
if (SUPPORT_DUKTAPE)
install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/rcvrcore/" DESTINATION rcvrcore COMPONENT pxscene)
install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/duk_modules/" DESTINATION duk_modules COMPONENT pxscene)
file(GLOB PXSCENE_INSTALL_FILES_JS "${CMAKE_CURRENT_SOURCE_DIR}/*.js")
file(GLOB PXSCENE_INSTALL_FILES_JS2 "${CMAKE_CURRENT_SOURCE_DIR}/duktape/*.js")
else (SUPPORT_DUKTAPE)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/rcvrcore DESTINATION . COMPONENT pxscene)
file(GLOB PXSCENE_INSTALL_FILES_JS "${CMAKE_CURRENT_SOURCE_DIR}/*.js")
endif (SUPPORT_DUKTAPE)

file(GLOB PXSCENE_INSTALL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/FreeSans.ttf"
"${CMAKE_CURRENT_SOURCE_DIR}/*.json" "${CMAKE_CURRENT_SOURCE_DIR}/*.conf"
"${CMAKE_CURRENT_SOURCE_DIR}/../external/vc.build/builds/*.dll" "${CMAKE_CURRENT_SOURCE_DIR}/Release/")
if (SUPPORT_DUKTAPE)
message("installing additional duktape files")
install(FILES ${PXSCENE_INSTALL_FILES_JS2} DESTINATION . COMPONENT pxscene)
endif (SUPPORT_DUKTAPE)
install(FILES ${PXSCENE_INSTALL_FILES_JS} ${PXSCENE_INSTALL_FILES} DESTINATION . COMPONENT pxscene)
set(CPACK_PACKAGE_VERSION "${PXSCENE_VERSION}")
set(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\pxscene.lnk' '$INSTDIR\\\\pxscene.exe' ''")
set(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete '$SMPROGRAMS\\\\$START_MENU\\\\pxscene.lnk'")
set(CPACK_PACKAGE_FILE_NAME "pxscene-setup")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "pxscene")
set(CPACK_RESOURCE_FILE_LICENSE "${PXCOREDIR}/LICENSE.txt")
set(CPACK_PACKAGE_VENDOR "pxscene.org")
set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/win/Spark_installer.ico")
set(CPACK_NSIS_MUI_UNIICON "${CMAKE_CURRENT_SOURCE_DIR}/win/Spark_installer.ico")
include(CPack)
endif (WIN32)
endif (PXSCENE_INSTALLER GREATER 0)
endif (BUILD_PXBENCHMARK_APP)

if (PXSCENE_ACCESS_CONTROL_CHECK)
add_definitions(-DENABLE_ACCESS_CONTROL_CHECK)
endif (PXSCENE_ACCESS_CONTROL_CHECK)

if (PXBENCHMARK_PERMISSIONS_CHECK)
add_definitions(-DENABLE_PERMISSIONS_CHECK)
endif (PXBENCHMARK_PERMISSIONS_CHECK)

if (PX_LIBRARY_SUPPORT GREATER 0)
message("Enabling build support for libraries")
if (PX_LIBRARY_LINK_PXCORE GREATER 0)
if (NOT APPLE)
set(LIBRARY_LINKER_OPTIONS -Wl,--whole-archive ${PXCORE_LIB_LOCATION}/libpxCore.a -Wl,--no-whole-archive)
endif (NOT APPLE)
endif (PX_LIBRARY_LINK_PXCORE GREATER 0)

if (BUILD_PXBENCHMARK_STATIC_LIB)
message("Enabling build support for pxscene static libraries")
add_library(pxscene_static ${PXSCENE_LIB_FILES})
if (${CMAKE_VERSION} VERSION_GREATER 2.8.11 )
add_library(pxscene ALIAS pxscene_static)
endif ()
set_target_properties(pxscene_static PROPERTIES OUTPUT_NAME "pxscene")
target_link_libraries(pxscene_static ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
add_definitions(${PXSCENE_DEFINITIONS})
if (PX_LIBRARY_LINK_PXCORE GREATER 0)
add_dependencies(pxscene_static pxCore rtCore)
endif (PX_LIBRARY_LINK_PXCORE GREATER 0)
endif (BUILD_PXBENCHMARK_STATIC_LIB)

if (BUILD_PXBENCHMARK_SHARED_LIB)
message("Enabling build support for pxscene shared libraries")
add_library(pxscene_shared SHARED ${PXSCENE_LIB_FILES})
if (${CMAKE_VERSION} VERSION_GREATER 2.8.11 )
add_library(pxscene ALIAS pxscene_shared)
endif ()
if (SUPPORT_DUKTAPE)
add_dependencies (pxscene_shared dukluv)
endif (SUPPORT_DUKTAPE)
set_target_properties(pxscene_shared PROPERTIES OUTPUT_NAME "pxscene")
target_link_libraries(pxscene_shared ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
add_definitions(${PXSCENE_DEFINITIONS})
if (PX_LIBRARY_LINK_PXCORE GREATER 0)
add_dependencies(pxscene_shared pxCore rtCore)
endif (PX_LIBRARY_LINK_PXCORE GREATER 0)
endif (BUILD_PXBENCHMARK_SHARED_LIB)
else ()
message("Disabling build support for libraries")
endif (PX_LIBRARY_SUPPORT GREATER 0)

